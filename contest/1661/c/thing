from sys import stdin, setrecursionlimit
input = stdin.readline

from bisect import bisect_left, bisect_right
from collections import deque
from functools import lru_cache, reduce
from heapq import heappush, heappop
from math import sqrt, ceil, floor, log2

T = int(input())

def rl(t = int):
    return list(map(t, input().split()))

for t in range(1, T + 1):
    n = int(input())
    a = rl()
    a.sort()

    reach = a[-1]
    while a and a[-1] == reach:
        a.pop()

    desMod = reach % 2
    matchHeap = [el for el in a if el % 2 == desMod] 
    diffHeap = [el for el in a if el % 2 != desMod] 
    ret = 0
    while matchHeap or diffHeap:
        print(matchHeap, diffHeap, reach)
        if diffHeap:
            # odd day
            cur = heappop(diffHeap)
            cur += 1
            if cur != reach:
                heappush(matchHeap, cur)
        elif matchHeap:
            cur = heappop(matchHeap)
            cur += 1
            if cur != reach:
                heappush(diffHeap, cur)
        ret += 1

        if not matchHeap and not diffHeap:
            break
        
        if matchHeap:
            # even day
            cur = heappop(matchHeap)
            cur += 2
            if cur < reach:
                heappush(matchHeap, cur)
        ret += 1

    print(ret)
    # [2, 3, 4, 4, 5, 7, 8]
    # [4, 4, 4, 4, 5, 7, 8]
    # [4, 4, 4, 4, 5, 7, 8]
